name: 프론트엔드 빌드-배포

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - frontend/**
  pull_request:
    branches:
      - dev
    paths: frontend/**

env:
  ARTIFACT_DIRECTORY: ./frontend/dist
  DOCKER_DIRECTORY: ./frontend/docker
  DEV_SERVER_FULLCHAIN_PEM: ${{ secrets.DEV_SERVER_FULLCHAIN_PEM }}
  DEV_SERVER_PRIVKEY_PEM: ${{ secrets.DEV_SERVER_PRIVKEY_PEM }}
  SERVER_OPTIONS_SSL_NGINX: ${{ secrets.SERVER_OPTIONS_SSL_NGINX }}
jobs:
  # build:
  #   name: npm 빌드
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: NodeJS 설치
  #       uses: actions/setup-node@v4
  #       with: 
  #         node-version: '20'

  #     - name: 의존관계 설치
  #       run: |
  #         cd frontend
  #         npm install
        
  #     - name: npm 빌드
  #       id: npm_run_build
  #       run: |
  #         pwd
  #         cd frontend
  #         npm run build

  #     - name: 아티팩트 파일 업로드
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: react-dist-files
  #         path: ${{ env.ARTIFACT_DIRECTORY }}

  docker-image-build-push:
    name: 도커 이미지 빌드 -> 푸시
    # needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 체크아웃
        uses: actions/checkout@v4
      # - name: 아티팩트 다운로드
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: react-dist-files
      #     path: ./frontend/dist/
      #     merge-multiple: true
      - name: ls
        run: ls -arlth
      - name: 도커 로그인
        uses: docker/login-action@v3
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 도커 이미지 빌드
        run: docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose-dev.yml build --no-cache
      - name: 도커 이미지 푸시
        run: docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose-dev.yml push

  deploy: 
    name: 배포
    needs: docker-image-build-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: SSH 접속 후 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
          # password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            whoami
            cd gongnomok-simulator
            git pull
            sudo docker compose -f ./frontend/docker/docker-compose-dev.yml pull
            sudo docker compose -f ./frontend/docker/docker-compose-dev.yml down
            sudo docker compose -f ./frontend/docker/docker-compose-dev.yml up -d

  slack_notify_success:
    needs: deploy
    name: 슬랙 성공 메세지 전송
    runs-on: ubuntu-latest
    if: success()
    steps:
      - uses: slackapi/slack-github-action@v1.26.0
        with: 
          channel-id: ${{ secrets.SLACK_CICD_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "프론트 배포 안내",
                          "style": {
                            "bold": true
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "🟢 배포 성공",
                    "emoji": true
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_CICD_BOT_TOKEN }}


  slack_notify_failure:
    needs: deploy
    name: 슬랙 실패 메세지 전송
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - uses: slackapi/slack-github-action@v1.26.0
        with: 
          channel-id: ${{ secrets.SLACK_CICD_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "rich_text",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "프론트 배포 안내",
                          "style": {
                            "bold": true
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "plain_text",
                    "text": "🔴 배포 실패",
                    "emoji": true
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_CICD_BOT_TOKEN }}


